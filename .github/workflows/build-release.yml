# 工作流的名称
name: Build and Release Executables

# 触发工作流的事件
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches:
      - main
  # 当有新的标签（如 v1.0, v2.0.1）被推送时触发
  release:
    types: [published]

# 工作流包含的任务
jobs:
  # 第一个任务：构建应用
  build:
    # 任务名称
    name: Build for ${{ matrix.os }}
    # 使用策略矩阵，为 Windows 和 Linux 并行构建
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    # 指定运行环境
    runs-on: ${{ matrix.os }}

    # 任务中的步骤
    steps:
      # 步骤1: 检出（下载）你的仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2: 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # 可以指定你需要的 Python 版本

      # 步骤3: (仅在 Linux 环境下运行) 安装 Qt6 依赖项
      - name: Install Qt6 dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libegl1-mesa libdbus-1-3 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-xinerama0 libxcb-xfixes0 libxcb-xinput0 qt6-base-dev

      # 步骤4: 安装 Python 依赖库
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 步骤5: 使用 PyInstaller 打包
      - name: Build with PyInstaller
        run: |
          pyinstaller --name "YT-DLP-Downloader" \
                      --onefile \
                      --windowed \
                      --add-data "icons${{ runner.os == 'Windows' && ';' || ':' }}icons" \
                      --add-data "translations${{ runner.os == 'Windows' && ';' || ':' }}translations" \
                      --icon="icons/icon.ico" \
                      main.py
      
      # 步骤6: 上传构建产物（可执行文件）
      # 这会将文件临时保存，以便下一个任务（发布）可以使用它
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-build
          path: dist/

  # 第二个任务：创建 Release 并上传附件
  release:
    # 任务名称
    name: Create GitHub Release
    # 依赖于 build 任务，必须在 build 成功后才运行
    needs: build
    # 仅在创建了新的 release 时运行此任务
    if: github.event_name == 'release'
    # 运行环境
    runs-on: ubuntu-latest

    steps:
      # 步骤1: 下载所有构建任务上传的产物
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      # 步骤2: 使用 softprops/action-gh-release 动作来创建 Release
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # 从下载的产物中查找文件并上传
          files: |
            artifacts/windows-latest-build/*.exe
            artifacts/ubuntu-latest-build/*